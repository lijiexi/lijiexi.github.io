<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lijiexi.github.io</id>
    <title>笑福林地</title>
    <updated>2022-06-19T18:55:41.472Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lijiexi.github.io"/>
    <link rel="self" href="https://lijiexi.github.io/atom.xml"/>
    <subtitle>快乐就完事了</subtitle>
    <logo>https://lijiexi.github.io/images/avatar.png</logo>
    <icon>https://lijiexi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 笑福林地</rights>
    <entry>
        <title type="html"><![CDATA[React Overview]]></title>
        <id>https://lijiexi.github.io/post/react-overview/</id>
        <link href="https://lijiexi.github.io/post/react-overview/">
        </link>
        <updated>2022-06-08T08:39:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="intro-to-react">Intro to React</h2>
<h3 id="what-is-react">What is React</h3>
<ul>
<li>React is a JavaScript library for building user interfaces created by Facebook.</li>
<li>React allows us to create reusable UI components.</li>
<li>A component takes in parameters, <strong>called <em>props</em> (short for “properties”), and returns a <em>hierarchy of views</em> to display via the <em>render</em> method</strong>.</li>
<li>React allows us to write JavaScript and HTML in the same file (JSX)</li>
</ul>
<h3 id="understanding-the-virtual-dom">Understanding the Virtual DOM</h3>
<ul>
<li>React uses a <em>virtual DOM</em> to <em>handle page rendering</em>.</li>
<li>In SPA where the view is highly interactive, directly manipulate a web page via the HTML DOM can cause performance issues.</li>
<li>Virtual DOM is an in-memory representation of the real DOM.
<ul>
<li>Unlike the HTML DOM, the virtual DOM is much easier to manipulate.</li>
<li>Handling numerous operations in milliseconds without affecting page performance.</li>
</ul>
</li>
<li>React periodically compares the virtual DOM and the HTML DOM.</li>
</ul>
<h3 id="what-is-jsx">What is JSX?</h3>
<p>• JavaScript and HTML <em>in the same file</em></p>
<p>• <em>JSX stands for JavaScript XML</em></p>
<p>• <em>JSX allows us to write HTML tags within JavaScript functions</em></p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-06-02%2011.04.17.png" alt="" loading="lazy"></figure>
<h3 id="common-tasks-in-front-end-development">Common tasks in front-end development</h3>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-06-02%2011.05.31.png" alt="" loading="lazy"></figure>
<h3 id="anatomy-of-a-react-app">Anatomy of a React app</h3>
<ul>
<li>index.js is the file first loaded (is used to generate index.html)</li>
<li>Index.js willrenderthe component called App</li>
<li>If you replace App with any other component, those will be rendered</li>
<li>Uppercase tags are assumed to be React JSX</li>
</ul>
<h2 id="react-components">React Components</h2>
<p>A component is combination of</p>
<ul>
<li>Template using HTML</li>
<li>User Interactivity using JS</li>
<li>Applying Styles using CSS</li>
</ul>
<p>Components come in two types, Class components and Function components</p>
<h3 id="create-a-class-component">Create a Class Component</h3>
<ul>
<li>When creating a React component, the component's name must start with an upper case letter.</li>
<li>The component has to include the extends React.Component statement, this statement creates an inheritance to <strong>React.Component, and gives your component access to React.Component's functions.</strong></li>
<li>The component also requires a render() method, this method returns HTML.</li>
</ul>
<h3 id="create-a-function-component">Create a Function Component</h3>
<p>A Function component also returns HTML, and behaves pretty much the same way as a Class component.</p>
<h3 id="component-constructor">Component Constructor</h3>
<ul>
<li><strong>You can have a constructor() function in your component, this method will be called when the component gets initiated.</strong>
<ul>
<li>The constructor is where you initiate the component's properties.</li>
<li>In React, component properties should be kept in an object called state.</li>
<li>You also include the super() statement, which executes the parent component's constructor function, and allow your component to have access to all the functions of the parent component (React.Component).</li>
</ul>
</li>
</ul>
<h3 id="react-props">React Props</h3>
<ul>
<li>Another way of handling component properties is by using props.</li>
<li>Props are like function arguments, and you send them into the component as attributes.</li>
<li>To send props into a component, use the same syntax as HTML attributes.</li>
<li>Props are also allow you pass data from one component to another, as parameters.</li>
</ul>
<h3 id="react-class-component-state">React Class Component State</h3>
<ul>
<li>React components has a built-in state object.</li>
<li>The state object is where you store property values that belongs to the component.</li>
<li>When the state object changes, the component re-renders.</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-06-03%2010.06.00.png" alt="" loading="lazy"></figure>
<h3 id="class-based-vs-function-components-in-react">Class-based vs Function Components in React</h3>
<ul>
<li>Class components have a state and provide access to lifecycle methods like componentDidMount.</li>
<li>stateless functional components are pure functions that do not have a state or lifecycle methods. They take in props and return html.</li>
<li>With the addition of Hooks, Function components are now almost equivalent to Class components.</li>
</ul>
<h2 id="hooks">Hooks</h2>
<h3 id="what-are-react-hooks">What are React Hooks?</h3>
<ul>
<li>a feature lets you use <em>state</em> and <em>life-cycle methods without</em> writing a <em>class component</em>.</li>
<li>React Hooks allow us to take <em>Stateless Functional Components</em> and apply <em>state</em> and <em>lifecycle methods</em> to them.</li>
<li>Hooks can only be called inside React function components.</li>
</ul>
<h1 id="qa">Q&amp;A</h1>
<h2 id="q1-common-web-framework-and-their-functionalities">Q1 Common Web Framework and their Functionalities</h2>
<ul>
<li>URL routing</li>
<li>Input form managing and validation</li>
<li>HTML, XML, JSON, and other product setups with a templating engine</li>
<li>Database connection configuration and resolute data manipulation through an object-relational mapper (ORM)</li>
<li>Web security against Cross-site request forgery (CSRF), SQL Injection, Cross-site Scripting (XSS) and other frequent malicious attacks</li>
<li>Session managment and retrieval</li>
</ul>
<h2 id="q2-front-end-back-end-frameworks-development-languages">Q2 Front-end &amp; Back-end Frameworks Development &amp; Languages</h2>
<h3 id="back-end-server-side-languages">Back-end (Server-side) Languages</h3>
<p>Almost any programming language (C#, Java, Objective-C,PHP,Ruby,Python etc.) can be used to build server-side applications.</p>
<h3 id="back-end-frameworks">Back-end Frameworks</h3>
<ul>
<li>ASP.NET(C#)</li>
<li>Flask, Django(Python)</li>
<li>Express(JS, Node.JS)</li>
<li>Laravel(PHP)</li>
</ul>
<h3 id="front-end-development-languages">Front-end Development &amp; Languages</h3>
<ol>
<li>HTML — Hypertext Mark-up Language: It is used to design thethe structure of web pages.</li>
<li>CSS — Cascading Style Sheet: Allows you to apply styles to web pages independent of the HTML that makes up each web page.</li>
<li>JS — JavaScript: A scripting language used to make the site interactive for the user.</li>
</ol>
<h2 id="q3-dynamic-websitesapplications">Q3 Dynamic Websites/Applications</h2>
<p>A <em>dynamic site</em> is one that can generate and return content based on the specific request URL and data (rather than always returning the same hard-coded file for a particular URL).</p>
<ul>
<li>Using the example of a product site, the server would store product &quot;data&quot; in a database rather than individual HTML files.</li>
<li>When receiving an HTTP GET Request for a product, the server determines the product ID, fetches the data from the database, and then constructs the HTML page for the response by inserting the data into an HTML template.</li>
<li>Using a database allows the product information to be stored efficiently in an easily extensible, modifiable, and searchable way.</li>
<li>Using HTML templates makes it very easy to change the HTML structure, because this only needs to be done in one place, in a single template, and not across potentially thousands of static pages.</li>
</ul>
<h2 id="q4-single-page-vs-traditional-web-apps">Q4 Single Page VS Traditional Web Apps</h2>
<p>web site that interacts with the user by dynamically rewriting the current page rather than loading entire new pages from a server.</p>
<ul>
<li>making the application behave more like a desktop application.</li>
<li><strong>SPAs serve a single page of html and use in page controls to operate dynamically.</strong></li>
<li><strong>Traditional web apps need to send many http requests, and get many html pages from the server. However Spas only need to initate the request get one html page, and use ajax to transfer data between front and back.</strong></li>
</ul>
<h2 id="q5-html-structural-elements-vs-css-styles">Q5 HTML structural Elements vs CSS Styles</h2>
<ul>
<li>The browser has its own default styling for each heading level.</li>
<li>However, these are easily modified and customized via <strong>CSS</strong>.</li>
</ul>
<h2 id="q6-different-style-of-using-css-in-conjunction-with-your-htlm-files">Q6 Different style of using CSS in conjunction with your HTLM files</h2>
<h2 id="q7-different-concepts-of-functional-programming-in-javascript-such-immediately-invoked-function-call-back-promise-and-so-on">Q7 Different concepts of functional programming in JavaScript such <em>Immediately invoked function,</em> Call-back, Promise, and so on</h2>
<h3 id="immediately-invoked-function">Immediately invoked function</h3>
<ul>
<li>An immediately invoked function expression (IIFE) is a design pattern that produces a lexical scope using function scoping.</li>
<li>IIFE can be used to avoid variable hoisting from within blocks or to prevent us from polluting the global scope.</li>
</ul>
<h3 id="call-back">Call-back</h3>
<ul>
<li>A callback is a function to be executed after another function has been executed</li>
<li>Callbacks are the most common way to write and handle asynchronous logic in JavaScript programs</li>
<li>In JavaScript, functions are objects. Functions can therefore take functions as arguments and can be returned by other functions. Functions that perform this operation are called higher-order functions. Any function that is passed as an argument is called a callback function.</li>
</ul>
<h3 id="promise">Promise</h3>
<ul>
<li>It serves the same function as callbacks but has a nicer syntax and makes it easier to handle errors.</li>
<li>It can be used to write better <em>asynchronous</em> code.</li>
<li>a promise represents the result of an *asynchronous operation</li>
</ul>
<h2 id="q8-jsx-syntax-and-its-pro-and-con">Q8 JSX Syntax and its pro and Con</h2>
<h3 id="jsx-syntax">JSX Syntax</h3>
<ul>
<li>Using JSX we can pass around HTML structures, or React elements as if they were standard JavaScript values.</li>
<li>JavaScript and HTML <em>in the same file</em></li>
<li>JSX stands for JavaScript XML</li>
<li>JSX allows us to write HTML tags within JavaScript functions</li>
</ul>
<h3 id="pro">Pro</h3>
<ul>
<li>The program structure is easier to visualize</li>
<li>JSX is more flexible</li>
</ul>
<h3 id="con">Con</h3>
<ul>
<li>jsx is not a template, and it's hard to understand</li>
<li>Code of jsx does not look neat</li>
</ul>
<h2 id="q9-stateful-and-stateless-components-different-phases-of-react-class-components-lifecycle">Q9 Stateful and Stateless Components, different phases of React class component’s lifecycle</h2>
<h3 id="stateful-and-stateless-components">Stateful and Stateless components</h3>
<ul>
<li>React components can further be categorized into <em>stateful</em> and <em>stateless</em> components.</li>
<li>A <em>stateless</em> component’s work is simply to <em>display data</em> that it <em>receives</em> from its <em>parent</em> React component.
<ul>
<li>If it receives any <em>events</em> or <em>inputs</em>, it can simply <em>pass</em> these up to <em>its parent</em> to <em>handle</em>.</li>
</ul>
</li>
<li>A <em>stateful component</em>, on the other hand, is <em>responsible</em> for <em>maintaining</em> some <em>kind</em> of <em>application state</em>
<ul>
<li>This might involve <em>data</em> being <em>fetched</em> from an <em>external source</em>, or <em>keeping track</em> of whether a <em>user</em> is <em>logged</em> in or <em>not</em>.</li>
<li>A <em>stateful component</em> can <em>respond</em> to <em>events</em> and <em>inputs</em> to <em>update</em> its <em>state</em>.</li>
</ul>
</li>
</ul>
<h3 id="lifecycle-of-components">Lifecycle of Components</h3>
<ul>
<li>Each component in React has a lifecycle which you can monitor and manipulate during its three main phases.
<ul>
<li>The three phases are: <strong>Mounting, Updating, and Unmounting</strong></li>
</ul>
</li>
</ul>
<h3 id="react-component-lifecycle-diagram">React Component Lifecycle Diagram</h3>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-06-03%2010.22.45.png" alt="" loading="lazy"></figure>
<h3 id="lifecycle-of-components-mounting">Lifecycle of Components – Mounting</h3>
<ul>
<li>Mounting : means putting elements into the DOM.
<ul>
<li>React has four built-in methods that gets called, in this order, when mounting a component:
<ul>
<li>constructor()</li>
<li>getDerivedStateFromProps()</li>
<li>render()</li>
<li>componentDidMount()</li>
</ul>
</li>
</ul>
</li>
<li>The render() method is required and will always be called, the others are optional and will be called if you define them.</li>
<li>The constructor() method is called before anything else, when the component is initiated, and it is the natural place to set up the initial state and other initial values.</li>
<li>The getDerivedStateFromProps() method is called right before <em>rendering</em> the element(s) in the DOM.</li>
<li>The componentDidMount() method is called after the component is <em>rendered</em>.</li>
</ul>
<h3 id="lifecycle-of-components-updating">Lifecycle of Components – Updating</h3>
<p>A component is updated whenever there is a change in the component's state or props.</p>
<h3 id="lifecycle-of-components-unmounting">Lifecycle of Components – Unmounting</h3>
<p>The next phase in the lifecycle is when a component is removed from the DOM, or <em>unmounting</em> as React likes to call it.</p>
<h2 id="q10-class-based-vs-function-components-in-react">Q10 Class-based vs Function Components in React</h2>
<h3 id="class-based-vs-function-components">Class-based vs Function Components</h3>
<ul>
<li>Class-based components will implement a render function, which returns some JSX (React’s extension of Regular JavaScript, used to create React elements),</li>
<li>Whereas function components will return JSX directly.</li>
</ul>
<h2 id="q11-limitations-of-the-class-style-components">Q11 Limitations of the Class-style Components</h2>
<h3 id="limitations-of-the-class-style-components">Limitations of the Class-style Components</h3>
<ul>
<li>did not provide good code reuse and component structure capabilities.</li>
<li>harder to share logic between class components without using design patterns and reder props and higher-order components.</li>
<li>class components are harder to understand, more complex, and require more <em>time</em> and <em>effort</em> to <em>maintain</em>.</li>
<li>need for a simpler implementation:Hooks</li>
</ul>
<h2 id="q12-what-are-react-hooks-understanding-of-different-kinds-of-hooks">Q12 What are React Hooks?, Understanding of different kinds of Hooks</h2>
<h3 id="what-are-react-hooks-2">What are React Hooks?</h3>
<ul>
<li>a feature lets you use <em>state</em> and <em>life-cycle methods without</em> writing a <em>class component</em>.</li>
<li>React Hooks allow us to take <em>Stateless Functional Components</em> and apply <em>state</em> and <em>lifecycle methods</em> to them.</li>
<li>Hooks can only be called inside React function components.</li>
</ul>
<h3 id="七大-hooks-都有哪些">七大 Hooks 都有哪些</h3>
<ol>
<li><code>useState</code> 状态</li>
<li><code>useEffect</code> 钩子，还有它的兄弟 <code>useLayoutEffect</code></li>
<li><code>useContext</code> 上下文</li>
<li><code>useReducer</code> 代替 Redux</li>
<li><code>useMemo</code> 缓存，还有它的小弟 <code>useCallback</code></li>
<li><code>useRef</code> 引用</li>
<li><code>自定义 Hook</code> 混合</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Malware]]></title>
        <id>https://lijiexi.github.io/post/malware/</id>
        <link href="https://lijiexi.github.io/post/malware/">
        </link>
        <updated>2022-03-28T09:11:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="intro-to-malware">Intro to Malware</h2>
<h3 id="types-of-malware">Types of malware</h3>
<ul>
<li><strong>Target</strong>
<ul>
<li>Mass</li>
<li>Specific</li>
</ul>
</li>
<li><strong>Forms</strong>
<ul>
<li>Trojan Horse: Beware of Greeks...</li>
<li>Virus: Spreading by host file</li>
<li>Worm: Spreading by vulnerability</li>
</ul>
</li>
</ul>
<h4 id="information-stealing">Information Stealing</h4>
<ul>
<li>Collect information from computer and send it to the attacker</li>
<li>Keyloggers: Actively recording everything typed</li>
<li>Sniffers: Monitor for anything that looks interested</li>
<li>Password stealers: Grab autocomplete and password information from web browsers and send them off</li>
<li>Intercepting: Browser extensions, proxy or similar technologies to intercept and manipulate web traffic</li>
</ul>
<h4 id="remote-access">Remote Access</h4>
<ul>
<li><strong>Backdoor</strong>
<ul>
<li>Allows an attacker remote access</li>
<li>Commonly a remote shell</li>
</ul>
</li>
<li><strong>Botnet</strong>
<ul>
<li>P2P networks, IRC, Twitter...</li>
<li>Listen and wait for commands</li>
</ul>
</li>
</ul>
<h4 id="ransomware"><strong>Ransomware</strong></h4>
<ul>
<li>Silently install, and start encrypting files in the background that you’re not using</li>
<li>using asymmetric encryption, so you’d never have had the key on the system</li>
</ul>
<h4 id="rootkit">Rootkit</h4>
<ul>
<li>Hooking into operating system calls and changing their behaviour
<ul>
<li>Conceal the payload</li>
<li>If you can’t see it, you can’t easily remove it</li>
</ul>
</li>
<li>Common examples
<ul>
<li>File and directory hiding</li>
<li>Process hiding</li>
<li>Registry hiding</li>
<li>Falsified files</li>
<li>Preventing applications from running</li>
<li>Resisting removal</li>
</ul>
</li>
</ul>
<h4 id="downloaders-and-launchers">Downloaders and Launchers</h4>
<ul>
<li>Specific standalone code to bundle other malware</li>
<li>Downloaders/Droppers</li>
<li>Launchers
<ul>
<li>To launch other malware</li>
<li>Generally to make use of exploits and launch in a specific way</li>
</ul>
</li>
</ul>
<h3 id="malware-on-windows">Malware on Windows</h3>
<ul>
<li><strong>Portable Execute format (PE)</strong></li>
<li><strong>Linking</strong>
<ul>
<li><strong>Static</strong>: Code from library is in executable</li>
<li><strong>Dynamic</strong>: Imports listed, OS loads at start</li>
<li><strong>Runtime</strong>: Connect to libraries only when function needed</li>
</ul>
</li>
<li><strong>PE Header</strong>
<ul>
<li>Information about the entire file</li>
<li>Type of code</li>
<li><strong>Flags (e.g. executable, DLL)</strong></li>
<li>Linking information</li>
<li>Size and memory information</li>
</ul>
</li>
</ul>
<h4 id="pe-sections">PE Sections</h4>
<ul>
<li><strong>PE file made up of sections</strong></li>
<li><strong>Sections have names, flags (e.g. executable) and content</strong></li>
<li>Typical layout:
<ul>
<li><strong>.text</strong>
<ul>
<li><strong>Instructions–whattheCPUexecutes</strong></li>
<li><strong>Containstheexecutablecode</strong></li>
</ul>
</li>
<li><strong>.rdata</strong>
<ul>
<li>Imports and exports</li>
</ul>
</li>
<li><strong>.data</strong>
<ul>
<li><strong>Globaldatafortheprogram</strong></li>
</ul>
</li>
<li><strong>.rsrc</strong>
<ul>
<li><strong>Resources used by the program (e.g. icons, dialogs, strings)</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="pe-execution">PE Execution</h4>
<ul>
<li><strong>Extract entry point, heap and stack sizes from PE header</strong></li>
<li><strong>Iterate through sections and load into virtual memory</strong></li>
<li>Find address of entry point from symbol table</li>
<li>Load imports</li>
<li>Create a new thread at that address, and execute</li>
</ul>
<h4 id="linking-information">Linking Information</h4>
<ul>
<li><strong>Imports</strong>
<ul>
<li>What will be called outside</li>
<li><strong>DLLs – libraries of functions that you can use</strong></li>
<li>get used to seeing certain DLLs
<ul>
<li><strong>Kernel32.dll – Core functionality (memory, files, hardware)</strong></li>
<li><strong>Advapi32.dll – Windows components (service manger, registry)</strong></li>
<li><strong>User32.dll - User interface components</strong></li>
<li><strong>Gdi32.dll – Display</strong></li>
<li><strong>Ntdll.dll – Interface to windows kernel</strong></li>
<li><strong>WSock32.dll/WS2_32.dll – Winsock (network)</strong></li>
<li><strong>Wininet.dll – High level networking functions</strong></li>
</ul>
</li>
</ul>
</li>
<li><strong>Exports</strong>
<ul>
<li>What can be called inside
<ul>
<li>Dllmain</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="common-techniques-employed">Common techniques employed</h3>
<h4 id="persistence">Persistence</h4>
<ul>
<li>
<p>Malware generally needs to persist between system boots</p>
</li>
<li>
<p>How can they make sure they load each time?</p>
<ul>
<li>Logon (Shell, Run)</li>
<li>Explorer hooks</li>
<li>Scheduled tasks</li>
<li>Services</li>
<li>Drivers</li>
<li>Boot execute</li>
<li>AppInit (DLL loaded into every application that starts)</li>
</ul>
</li>
<li>
<p><strong>Generally: Remove their persistence, remove the malware!</strong></p>
</li>
<li>
<p>If the malware is running</p>
<ul>
<li>Make it hard to stop the Malware once it is running</li>
<li>Prevent removing/changing the persistence</li>
<li>Hide the presence of persistence (Rootkit behaviour)</li>
</ul>
</li>
<li>
<p>RunOnce</p>
<ul>
<li>Every boot, the malware is loaded from the RunOnce key, then removed – but it’s in memory</li>
<li>No tools will show it as being persistent anywhere, as the RunOnce key is no longer populated</li>
<li>On a clean shutdown, write back to the RunOnce key</li>
<li><strong>Solution: Don’t clean shutdown!</strong></li>
</ul>
</li>
</ul>
<h4 id="stealth">Stealth</h4>
<ul>
<li>Camouflage against legitimate system files</li>
<li>Pretend to be Microsoft</li>
<li>Inject into other processes</li>
<li><strong>Replace legitimate files</strong></li>
<li>Hiding from the operating system
<ul>
<li>Rootkit time</li>
</ul>
</li>
</ul>
<h2 id="analysing-malware">Analysing Malware</h2>
<h3 id="basic-static-analysis">Basic Static Analysis</h3>
<ul>
<li>Examine the PE file itself</li>
<li><strong>Signature</strong>: What was it compiled with?</li>
<li><strong>Structure</strong>: Is it packed?</li>
<li><strong>Sections</strong>: How is the file made up?</li>
<li><strong>Metadata</strong>: What other information is there?</li>
<li><strong>Certification</strong>: Has the file been digitally signed?</li>
<li><strong>Imports</strong>: What does it use?</li>
<li><strong>Exports</strong>: What does it make available?</li>
<li><strong>Strings</strong>: What text does it contain?</li>
<li><strong>Resources</strong>: What icons, menus, dialogs does it have?</li>
</ul>
<h4 id="signature-structure">Signature &amp; Structure</h4>
<p><strong>Detect it Easy</strong></p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-03-28%2016.46.36.png" alt="" loading="lazy"></figure>
<ul>
<li>Helps you before you try to do static analysis</li>
<li>Uses signatures for PE information</li>
</ul>
<h4 id="examining-the-pe-file">Examining the PE File</h4>
<ul>
<li>The <strong>Portable Executable (PE)</strong> file format is used by Windows executables, object code, and DLLs</li>
<li>The PE file format is a data structure that contains the information necessary for the Windows OS loader to manage the wrapped executable code</li>
<li>The information in the PE can provide valuable information to the malware analyst</li>
<li>Use DependencyWalker and Peview to examine a PE file</li>
</ul>
<h5 id="pe-file-structure">PE File Structure</h5>
<p><strong>Header</strong></p>
<ul>
<li>stores information about every library that will be loaded and every function that will be used by the program</li>
</ul>
<p><strong>Sections</strong></p>
<ul>
<li><strong>.text</strong> Contains the executable code</li>
<li><strong>.rdata</strong> Holds <strong>read-only</strong> data that is globally accessible within the program</li>
<li><strong>.data</strong> Stores global data accessed throughout the program</li>
<li><strong>.rsrc</strong> Stores resources needed by the executable</li>
</ul>
<h4 id="packing-and-obfuscation">Packing and Obfuscation</h4>
<ul>
<li>
<p>Is it packed?</p>
<ul>
<li>Barely any imports</li>
<li>No useful strings</li>
<li>Non-standard names of sections o Section specifications</li>
<li>Section contains code</li>
<li>Section can be executed as code o Size differences</li>
<li>Two main functions
<ul>
<li>LoadLibrary</li>
<li>GetProcAddress</li>
</ul>
</li>
<li>Other functions
<ul>
<li>Functions which work with virtual memory</li>
<li>Functions to work with libraries</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Is it obfuscated?</p>
<ul>
<li>No useful names</li>
<li>Conventions not adhered to</li>
<li>No useful strings</li>
</ul>
</li>
</ul>
<h4 id="sections-and-metadata"><strong>Sections and Metadata</strong></h4>
<p><strong>PEStudio</strong></p>
<h4 id="imports-and-exports"><strong>Imports and Exports:</strong></h4>
<p>Dependency Walker</p>
<ul>
<li><strong>Imports</strong>: What functions does the malware use</li>
<li>Only includes those directly accessed</li>
<li><strong>Exports</strong>: What functions does the malware make available – when the malware isn’t a single file</li>
<li>Dependency walker breaks this down for us</li>
</ul>
<h4 id="common-dlls">Common DLLs</h4>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-03-28%2016.56.19.png" alt="" loading="lazy"></figure>
<h5 id="examples-of-imported-functions">Examples of Imported functions</h5>
<ul>
<li>OpenProcess, GetCurrentProcess, and GetProcessHeap
<ul>
<li>open and manipulate processes</li>
</ul>
</li>
<li>ReadFile, CreateFile, and WriteFile</li>
<li>FindFirstFile and FindNextFile</li>
</ul>
<h5 id="strings"><strong>Strings</strong></h5>
<p><strong>Simple tool – find all the strings that are accessible in the file</strong></p>
<h4 id="resources"><strong>Resources</strong></h4>
<p>Resource Hacker</p>
<ul>
<li>View the sections inside the application</li>
<li>View the resources that are associated with it</li>
<li>Inspect any images, icons, dialogs and other resources inside</li>
</ul>
<h3 id="advanced-static-analysis">Advanced Static Analysis</h3>
<p><strong>The only real tool for the job: IDA</strong></p>
<h4 id="graph-and-text-mode">Graph and Text Mode</h4>
<ul>
<li>Spacebar switches mode</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-03-28%2017.01.59.png" alt="" loading="lazy"></figure>
<h4 id="functions">Functions</h4>
<ul>
<li>Shows each function, length, and flags
<ul>
<li>L = Library functions</li>
</ul>
</li>
<li>Sortable
<ul>
<li>Large functions usually more important</li>
</ul>
</li>
</ul>
<h4 id="names-window">Names Window</h4>
<ul>
<li>Every address with a name
<ul>
<li>Functions, named code, named data, strings</li>
</ul>
</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-03-28%2017.03.33.png" alt="" loading="lazy"></figure>
<h4 id="imports-exports">Imports &amp; Exports</h4>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-03-28%2017.04.48.png" alt="" loading="lazy"></figure>
<h4 id="structures">Structures</h4>
<ul>
<li>All active data structures
<ul>
<li>Hover to see yellow pop-up window</li>
</ul>
</li>
</ul>
<h4 id="function-call">Function Call</h4>
<ul>
<li>Parameters pushed onto stack</li>
<li>CALL to start function</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-03-28%2017.06.16.png" alt="" loading="lazy"></figure>
<h4 id="jump-to-location">Jump to Location</h4>
<ul>
<li>Press G</li>
<li>Can jump to address or named location</li>
</ul>
<h4 id="searching-function-and-argument-recognition">Searching &amp; Function and Argument Recognition</h4>
<ul>
<li>IDA Pro identifies a function, names it, and also names the local variables</li>
<li>It's not always correct</li>
</ul>
<h3 id="advanced-analysis">Advanced Analysis</h3>
<ul>
<li>You are only looking to see if you can spot anything interesting, you’re not trying to reverse engineer the whole thing</li>
<li>Look up strings and function calls and see if there is any interesting code around it</li>
<li>For UPX packed binaries, you’ll need to unpack them first</li>
<li>Don’t worry about reverse engineering other packed binaries!</li>
</ul>
<h2 id="reading-list">Reading List</h2>
<ul>
<li>Michael Sikorski and Andrew Honig. <strong>Practical Malware Analysis</strong>. The Hands- On Guide to Dissecting Malicious Software. Chapters 4, 5, 7,8, 9</li>
<li><a href="https://www.hex-rays.com/products/ida/">IDA Pro</a></li>
<li><a href="http://www.ollydbg.de/">OllyDbg</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Memory management, File IO, ...]]></title>
        <id>https://lijiexi.github.io/post/memory-management-file-io/</id>
        <link href="https://lijiexi.github.io/post/memory-management-file-io/">
        </link>
        <updated>2022-03-14T07:12:57.000Z</updated>
        <content type="html"><![CDATA[<h2 id="memory-layout-heap">Memory Layout - Heap</h2>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-03-14%2014.46.55.png" alt="" loading="lazy"></figure>
<ul>
<li>Global variables, static variables and program instructions get their memory in permanent storage area</li>
<li>local variables are stored in Stack.</li>
<li>The memory space between these two region is known as Heap area.</li>
<li>This region is used for dynamic memory allocation during execution of the program.</li>
<li>The size of heap keep changing.</li>
</ul>
<h2 id="memory-allocation">Memory Allocation</h2>
<ul>
<li><strong>The header &lt;stdlib.h&gt; declares functions for storage allocation</strong></li>
<li>malloc <strong>returns a pointer to space for an object of a specified size</strong>, or NULL if the request cannot be satisfied. The allocated space is uninitialized</li>
</ul>
<pre><code class="language-c">void *malloc(size_t size)
</code></pre>
<ul>
<li>free <strong>deallocates the space that previously allocated by</strong> calloc, malloc, or realloc</li>
</ul>
<pre><code class="language-c">void free(void *P)
</code></pre>
<ul>
<li>size_t is an unsigned integer defined in stddef.h as (on my computer):</li>
</ul>
<pre><code class="language-c">typedef long unsigned int size_t;
</code></pre>
<h3 id="calloc">calloc</h3>
<ul>
<li>calloc <strong>returns a pointer to space for an array of objects</strong>, each of size size, or NULL <strong>if the request cannot be satisfied. The space is initialized to zero bytes</strong></li>
</ul>
<pre><code class="language-c">void *calloc(size_t nobj, size_t size)
</code></pre>
<ul>
<li>realloc <strong>changes the size of the previously allocated memory by a new size.</strong></li>
<li>realloc <strong>returns a pointer to the new space, or NULL if the request cannot be satisfied, in which case the old allocated memory is unchanged.</strong></li>
</ul>
<pre><code class="language-c">void *realloc(void *p, size_t size)
</code></pre>
<p><strong>Example</strong></p>
<pre><code class="language-c">#include &lt;stdio .h&gt; 
#include &lt;stdlib .h&gt; 
#include &lt;string .h&gt;
int main() {
	char ∗language ;
	language = calloc ( 200, sizeof (char) );
	if( language == NULL ) { 
    fprintf(stderr ,
            &quot;Error − ...\n&quot;);
}
else {
	strcpy( language , &quot;C programming language&quot;);
}
	printf (&quot;Language : %s\n&quot; , language ); 
  free ( language );
	return 0;
 }
</code></pre>
<h3 id="realloc">realloc</h3>
<pre><code class="language-c">int main() {
	char ∗language ;
	language = malloc( 25 ∗ sizeof(char) ); 
  if( language == NULL ) {
    fprintf(stderr , &quot;...\n&quot;);
}
	else {
	strcpy( language , &quot;C programming language&quot;);
}
language = realloc( language , 10 ∗ sizeof(char) ); 
  if( language == NULL ) {
    fprintf(stderr , &quot;...\n&quot;);
	}
	else {
	strcat( language , &quot; tutorial&quot;);
}
	printf (&quot;Language : %s\n&quot; , language ); 
  free ( language );
	return 0;
 }
</code></pre>
<h3 id="pointer">Pointer</h3>
<pre><code class="language-c">int main() {
	int ∗iptr = malloc (sizeof(int));
	float ∗fptr = malloc (sizeof(float )); 
  double ∗dptr = malloc ( sizeof (double ));
	∗iptr = 100; 
	∗fptr = 4.13f; 
	∗dptr = 459000.0;
	printf(&quot;∗iptr: %d\n&quot;, ∗iptr); 
	printf(&quot;∗fptr: %.2f\n&quot;, ∗fptr); 
	printf(&quot;∗dptr: %.2f\n&quot;, ∗dptr);
	free(iptr); 
	free(fptr); 
	free(dptr); 
	return 0;
}
</code></pre>
<h2 id="file-io">File IO</h2>
<ul>
<li>fopen <strong>opens the named file, and returns a stream, or NULL if the attempt fails</strong></li>
<li>FILE *fopen(const char *filename, const char *mode)</li>
</ul>
<p><strong>Legal values for mode include:</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">&quot;r&quot;</th>
<th style="text-align:center">open text file for reading</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&quot;w&quot;</td>
<td style="text-align:center">create text file for writing; discard previous contents if any</td>
</tr>
<tr>
<td style="text-align:center">&quot;a&quot;</td>
<td style="text-align:center">append; open or create text file for writing at end of file</td>
</tr>
<tr>
<td style="text-align:center">&quot;r+&quot;</td>
<td style="text-align:center">open text file for update (i.e., reading and writing)</td>
</tr>
<tr>
<td style="text-align:center">&quot;w+&quot;</td>
<td style="text-align:center">create text file for update; discard previous contents if any</td>
</tr>
<tr>
<td style="text-align:center">&quot;a+&quot;</td>
<td style="text-align:center">append; open or create text file for update, writing at end</td>
</tr>
</tbody>
</table>
<ul>
<li>fflush <strong>causes any buffered but unwritten data to be written on an output stream</strong></li>
</ul>
<pre><code class="language-c">int fflush(FILE *Stream)
</code></pre>
<ul>
<li><strong>on an input stream, the effect is undefined</strong></li>
<li><strong>It returns EOF for a write error, and zero otherwise</strong></li>
<li>fflush(NULL) <strong>flushes all output streams</strong></li>
<li>fclose flushes any unwritten data for stream, discards any unread buffered input</li>
</ul>
<pre><code class="language-c">int fclose(FILE *Stream)
</code></pre>
<ul>
<li><strong>frees any automatically allocated buffer, then closes the stream</strong></li>
<li>It returns EOF if any errors occurred, and zero otherwise</li>
</ul>
<h3 id="writing-a-file">Writing a file</h3>
<ul>
<li>fputc() writes the character value to an output stream</li>
</ul>
<pre><code class="language-c">int fputc( int c, FILE *fp );
</code></pre>
<ul>
<li>fputs() writes a string to an output stream</li>
</ul>
<pre><code class="language-c">int fputs( const char *s, FILE *fp );
</code></pre>
<ul>
<li>fprintf write a string to an output stream</li>
</ul>
<pre><code class="language-c">int fprintf(FILE *fp, const char *format, ...)
</code></pre>
<h3 id="reading-a-file">Reading a file</h3>
<ul>
<li>fgetc() reads a character from the input file. he return value is the character read, or in case of any error, it returns EOF</li>
<li><strong>fgets() reads up to n-1 characters from an input stream. It copies the read string into a buffer, appending a null character to terminate the string.</strong></li>
<li><strong>fscanf reads strings from a file, but it stops reading after encountering the first space character</strong></li>
</ul>
<h2 id="miscellaneous">Miscellaneous</h2>
<h3 id="command-line-arguments">Command-line Arguments</h3>
<ul>
<li>In C it is possible to accept command line arguments</li>
<li><strong>Command-line arguments are given after the name of a program</strong></li>
<li><strong>passed to the program by the operating system</strong></li>
<li>The full declaration of main looks like this:</li>
</ul>
<pre><code class="language-c">int main ( int argc, char *argv[] )
#argc:number of command line arguments including the name of the program
#argv:list of all command line arguments
  #argv[0]: the program name (or an empty string)
  #argv[1] to argv[argc-1]: the actual command line arguments
</code></pre>
<h3 id="variable-arguments">Variable Arguments</h3>
<ul>
<li>Sometimes, you would like to have a function that accept an arbitrary number of arguments</li>
<li>for example a function that accepts any number of values and returns the average</li>
<li><strong>the last argument is written as ellipses, i.e. three dotes (...)</strong></li>
<li>the one just before the ellipses is always an int which will represent the total number variable arguments passed</li>
</ul>
<h3 id="header-file">Header file</h3>
<ul>
<li>The header file stdarg.h provides the functions and macros to implement the functionality of variable arguments as follows</li>
<li><strong>Define a function with its last parameter as ellipses and the one just before the ellipses is always an int which will represent the number of arguments.</strong></li>
<li>Create a va_list type variable in the function definition</li>
<li>Use int parameter and va_start macro to initialize the va_list variable to an argument list</li>
<li>Use va_arg macro and va_list variable to access each item in argument list</li>
<li><strong>Use a macro va_end to clean up the memory assigned to va_list variable</strong></li>
</ul>
<p><strong>Example</strong></p>
<pre><code class="language-c">#include &lt;stdio .h&gt; 
#include &lt;stdarg .h&gt;
double average(int num,...) { 
  va_list valist ;
	double sum = 0.0;
	inti;
	va_start(valist , num);
	for (i = 0; i &lt; num; i++) {
    sum += va_arg( valist , int );
  }
	 va_end( valist );
	return sum/num;
}
int main() {
  printf(&quot;Average of 2, 3, 4, 5 =%f\n&quot;, average (4 , 2 ,3 ,4 ,5));
	printf(&quot;Average of 5, 10, 15 =%f\n&quot;, average (3 , 5 ,10 ,15));
}
</code></pre>
<h3 id="typedef">typedef</h3>
<ul>
<li>The typedef keyword allows the programmer to create new names for types such as int</li>
<li><strong>Typedefs can be used both to provide more clarity to your code and to make it easier to make changes to the underlying data types</strong></li>
<li><strong>in C, struct variables must be declared by a combination of the keyword struct and the name of the struct</strong></li>
</ul>
<h3 id="typedef-vs-define">typedef vs #define</h3>
<ul>
<li>#define is a <strong>C-directive which is also used to define the aliases for various data types similar to typedef but with the following differences:</strong></li>
<li>typedef is limited to giving symbolic names to types only where as #define can be used to define alias for values as well</li>
<li><strong>typedef interpretation is performed by the compiler whereas #define statements are processed by the pre-processor</strong></li>
</ul>
<h3 id="preprocessors">Preprocessors</h3>
<ul>
<li>Preprocessors are a way of making text processing with your C program before they are actually compiled</li>
<li><strong>Before the actual compilation of every C program it is passed through a Preprocessor.</strong></li>
<li>The Preprocessor looks through the program trying to find out specific instructions called Preprocessor directives that it can understand.</li>
<li><strong>All Preprocessor directives begin with the # (hash) symbol</strong></li>
</ul>
<pre><code class="language-c">#define Substitutes a preprocessor macro. 
#include Inserts a particular header from another file. 
#undef Undefines a preprocessor macro.
#ifdef Returns true if this macro is defined. 
#ifndef Returns true if this macro is not defined. 
#if Tests if a compile time condition is true. 
#else The alternative for #if.
#elif #else and #if in one statement.
#endif Ends preprocessor conditional.
#error Prints error message on stderr.
#pragma Issues special commands to the compiler,using a standardized method.
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pointers in C]]></title>
        <id>https://lijiexi.github.io/post/pointers-in-c/</id>
        <link href="https://lijiexi.github.io/post/pointers-in-c/">
        </link>
        <updated>2022-02-24T19:53:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="pointers">Pointers</h2>
<ul>
<li><strong>A pointer is a variable that contains the address of a variable</strong></li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-15%2009.21.06.png" alt="" loading="lazy"></figure>
<pre><code class="language-c">int x=1, y=2, z[10];
/∗ip is a pointer to int∗/
int ∗ip;
/∗ip now points to x ∗/ 				
ip = &amp;x; 	
/∗y is now 1∗/							 
y = ∗ip; 
/∗x is now0∗/								  
∗ip = 0;
/∗ x = x + 1 ∗/						     
∗ip = ∗ip + 1; 	
/∗ ip now points to z[0] ∗/				       
ip = &amp;z[0];	
/∗ y = z[0] + 1 ∗/						    
y = ∗ip + 1; 					    	
++∗ip;          				        
(∗ip)++; 							
int∗iq = ip;
</code></pre>
<h3 id="pointers-to-pointers">Pointers to Pointers</h3>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-25%2010.30.53.png" alt="" loading="lazy"></figure>
<h3 id="pointer-arithmetic">Pointer arithmetic</h3>
<ul>
<li>the variable pointer can be incremented</li>
<li>the formula for computing the address of pa + i where pa has type T*:</li>
</ul>
<p>​	<strong>addr(pa + i) = addr(pa) + [sizeof(T) * i]</strong></p>
<ul>
<li>i is scaled according to the size of the objects pa points to, which is determined by the declaration of p</li>
<li>If an <strong>int</strong> is four bytes, for example, then i will be scaled by four</li>
</ul>
<h3 id="null-pointers">Null Pointers</h3>
<pre><code class="language-c">int *ptr = NULL; /* ptr = 0*/
</code></pre>
<ul>
<li>use address 0 because that memory is reserved by the OS, so <strong>access to address 0 is not permitted</strong>.</li>
<li>can use if statement to check null pointer</li>
</ul>
<h3 id="return-pointer-from-functions">Return pointer from functions</h3>
<p>​	C allows you to return a pointer from function. It is not good to return the address of a local variable to outside of the function.</p>
<pre><code class="language-c">/∗ if compilation failed , use gcc −ansi or gcc −std=c89 ∗/ 
#include &lt;stdio .h&gt;
#include &lt;time.h&gt;
int ∗ getRandom(){
	static int r[10];
	int i;
	srand((unsigned)time(NULL)); /∗ set the seed ∗/ 
    for (i = 0; i &lt; 10; ++i)
      r[i] = rand();
  		return r;
}
int main () {
	int ∗p; int i;
	p = getRandom();
	for ( i=0; i&lt;10; i++)
    printf(&quot;∗(p+[%d]) :%d\n&quot;, i, ∗(p+i) );
	return 0;
}
</code></pre>
<h3 id="pointers-and-arrays">Pointers and Arrays</h3>
<ul>
<li><strong>In C, there is a strong relationship between pointers and arrays</strong></li>
</ul>
<pre><code class="language-c">int a[10];
int *pa;
pa = &amp;a[0]; /* pa = a*/
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-25%2011.12.31.png" alt="" loading="lazy"></figure>
<pre><code class="language-c">int x = *pa; /* same as x = a[0] */
</code></pre>
<ul>
<li>the variable pointer can be incremented, but the array name cannot, because it is a <strong>constant pointer.</strong></li>
<li>pa + i point <strong>i elements after pa</strong>, and <strong>pa - i</strong> points i elements before</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-25%2011.15.19.png" alt="" loading="lazy"></figure>
<p><strong>The name of an array is a synonym for the location of the initial element</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">pa</th>
<th style="text-align:center">&amp;a[0]</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">*a</td>
<td style="text-align:center">*pa</td>
<td style="text-align:center">a[0]</td>
</tr>
<tr>
<td style="text-align:center">a+1</td>
<td style="text-align:center">pa+1</td>
<td style="text-align:center">&amp;a[1]</td>
</tr>
<tr>
<td style="text-align:center">a+i</td>
<td style="text-align:center">pa+i</td>
<td style="text-align:center">&amp;a[i]</td>
</tr>
<tr>
<td style="text-align:center">*(a+1)</td>
<td style="text-align:center">*(pa+1)</td>
<td style="text-align:center">a[1]</td>
</tr>
<tr>
<td style="text-align:center">*(a+i)</td>
<td style="text-align:center">*(pa+i)</td>
<td style="text-align:center">a[i]</td>
</tr>
</tbody>
</table>
<h3 id="pointers-to-functions">Pointers to Functions</h3>
<ul>
<li><strong>in C, it is possible to define pointers to functions</strong></li>
</ul>
<pre><code class="language-c">int (*func)(int, int);
</code></pre>
<ul>
<li>like pointer to variables, function pointers can be assigned, placed in arrays, passed to functions, returned by functions, ...</li>
</ul>
<pre><code class="language-c">#include &lt;stdio .h&gt;
int max (int, int);
int main ()
{
	int (∗func)(int, int);
	func = max; /∗ or func = &amp;max ∗/ 
  printf(&quot;%d\n&quot;, func(3, 4)); 
  return 0;
}
int max(int a, int b)
{
	return a&gt;b ? a : b;
}
</code></pre>
<h3 id="pointers-to-constants-and-constant-pointers">Pointers to constants and constant pointers</h3>
<ul>
<li>A <strong>constant pointer</strong> is a pointer that cannot change the address its holding</li>
</ul>
<pre><code class="language-c">int * const ptr;
</code></pre>
<ul>
<li>A pointer to constant is a pointer through which we cannot change the <strong>value of the variable it points</strong> to.</li>
</ul>
<pre><code class="language-c">const int * ptr;
</code></pre>
<ul>
<li>we could have both in one definition</li>
</ul>
<pre><code class="language-c">const int * const ptr;
</code></pre>
<h2 id="strings">Strings</h2>
<ul>
<li>string in C is actually a <strong>one-dimensional array</strong> of characters which is terminated by a <strong>null character '\0'</strong></li>
<li>a <strong>null-terminated string</strong> contains the character that comprise the string followed by a null</li>
</ul>
<pre><code class="language-c">char greeting[6] = {'H','e','l','l','o','\0'};
/* same as */
char greeting[] = &quot;Hello&quot;;
</code></pre>
<ul>
<li>The C compiler automatically <strong>places the '\0' at the end of the string</strong></li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-25%2011.39.55.png" alt="" loading="lazy"></figure>
<ul>
<li>there is a difference between these definitions:</li>
</ul>
<pre><code class="language-c">char amessage[] = &quot;now is the time&quot;;
char *pmessage = &quot;now is the time&quot;;
</code></pre>
<ul>
<li><strong>Individual characters within the array may be changed but amessage will always refer to the same storage</strong></li>
<li><strong>pmessage points to a string constant and may be modi􏰁ed to point elsewhere, but the result is unde􏰁ned if you try to modify the string contents</strong></li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-25%2011.42.28.png" alt="" loading="lazy"></figure>
<h3 id="string-io">String IO</h3>
<ul>
<li>reading string:
<ul>
<li>using scanf(): scanf(&quot;%s&quot;, str);</li>
<li>reading it character by character using <strong>getchar()</strong></li>
<li>using <strong>gets()</strong> but it is <strong>unsafe and dangerous</strong>, never use it. It continues reading <strong>until ‘\n’ or EOF</strong></li>
</ul>
</li>
<li>printing strings:
<ul>
<li>using printf(): printf(&quot;%s\n&quot;, str);</li>
<li>printing it character by character using <strong>putchar()</strong></li>
<li>using <strong>puts(str)</strong> to print the entire string</li>
</ul>
</li>
</ul>
<h2 id="structures">Structures</h2>
<ul>
<li>structure is a user de􏰁ned data type that allows to combine data items of different kinds</li>
<li>used to represent a record</li>
<li>format of the struct statements:</li>
</ul>
<img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-25%2011.45.47.png" style="zoom:50%;" />
<ul>
<li>to access member of a structure, use .</li>
</ul>
<h3 id="structures-as-function-arguments">Structures as Function Arguments</h3>
<pre><code class="language-c">#include &lt;stdio .h&gt;
#include &lt;string .h&gt;
struct Books { ... };
void printBook(struct Books book);
int main( ) {
	struct
	...
	printBook ( book1 ) ;
	return 0;
}
void printBook(struct Books book){
	printf( &quot;title : %s\n&quot;, book. title );
	printf( &quot;author : %s\n&quot;, book.author);
	printf( &quot;book_id : %d\n&quot;, book.book_id);
}
</code></pre>
<ul>
<li>can pass a structure to a function as a pointer</li>
<li>use <strong>-&gt;</strong> to access the members</li>
</ul>
<h3 id="bit-fields">Bit Fields</h3>
<ul>
<li>Bit Fields allow the packing of data in a structure. This is especially useful when memory or data storage is at a premium</li>
<li>Typical examples include:
<ul>
<li>Packing several objects into a machine word. e.g. 1 bit 􏰂ags can be compacted</li>
<li>Reading external (non-standard) 􏰁le formats, e.g., 9-bit integers</li>
</ul>
</li>
</ul>
<h2 id="unions">Unions</h2>
<ul>
<li>union is a special data type available in C that enables you to <strong>store different data types</strong> in the same memory location</li>
<li>define a union with many members, but only one member can contain a value at any given time</li>
</ul>
<pre><code class="language-c">union Data {
	int i;
	float f;
	char str[20];
} data;
</code></pre>
<img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-25%2011.52.44.png" style="zoom:50%;" />
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web & Cloud App Development]]></title>
        <id>https://lijiexi.github.io/post/web-and-cloud-app-development/</id>
        <link href="https://lijiexi.github.io/post/web-and-cloud-app-development/">
        </link>
        <updated>2022-02-17T01:21:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="web-app-architecture">Web App Architecture</h2>
<h3 id="web-frameworks-pros-cons">Web Frameworks – Pros &amp; Cons</h3>
<h4 id="pros">Pros</h4>
<ul>
<li>Saves time, makes development process going faster</li>
<li>Ease of maintenance</li>
<li>Security</li>
</ul>
<h4 id="cons">Cons</h4>
<ul>
<li>Every framework has its limits and rules</li>
</ul>
<h3 id="examples-of-full-stack-js-web-frameworks">Examples of Full-stack JS Web Frameworks</h3>
<ul>
<li><strong>MEAN stack</strong></li>
<li><strong>MERN stack</strong></li>
</ul>
<h3 id="hosting-websites">Hosting websites</h3>
<ul>
<li>First, a web server has to store the website's files, namely all HTML documents and their related assets, including images, CSS stylesheets, JavaScript files, fonts, and video.
<ul>
<li>A dedicated web server is typically more available.</li>
<li>A dedicated web server is always connected to the Internet.</li>
<li>A dedicated web server is typically maintained by a third-party.</li>
</ul>
</li>
</ul>
<h3 id="http-methodsverbs">HTTP Methods/Verbs</h3>
<ul>
<li>GET: Get a specific resource (e.g. an HTML file containing information about a product, or a list of products).</li>
<li>POST: Create a new resource (e.g. add a new article to a wiki, add a new contact to a database).</li>
<li>HEAD: Get the metadata information about a specific resource without getting the body like GET would.</li>
<li>PUT: Update an existing resource</li>
<li>DELETE: Delete the specified resource.</li>
</ul>
<h3 id="static-sites">Static Sites</h3>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-09%2016.19.42.png" alt="" loading="lazy"></figure>
<p>​	The server for a static site will only ever need to process GET requests, because the server doesn't store any modifiable data. It also doesn't change its responses based on HTTP Request data (e.g., URL parameters or cookies).</p>
<h3 id="dynamic-sites">Dynamic sites</h3>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-09%2016.21.59.png" alt="" loading="lazy"></figure>
<h3 id="single-page-applications">Single Page Applications</h3>
<ul>
<li>A web application or web site that interacts with the user by dynamically rewriting the current page rather than loading <strong>entire new pages</strong> from a server.</li>
<li>JavaScript frameworks, such as <strong>Angular, Ember.js, Knockout.js, Meteor.js, ExtJS, Vue.js and React</strong> have adopted SPA principles.</li>
</ul>
<h3 id="single-page-vs-traditional-web-apps">Single Page VS Traditional Web Apps</h3>
<img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-09%2016.25.28.png" style="zoom:50%;" />
<h2 id="intro-to-html">Intro to HTML</h2>
<h3 id="uniform-resource-locators-url">Uniform Resource Locators (URL)</h3>
<p>​	In order to allow clients to request different resources from the server, a naming mechanism is required so that the client knows how to ask the server for the file.</p>
<h3 id="html-syntax">HTML Syntax</h3>
<h4 id="elements-and-attributes">Elements and Attributes</h4>
<ul>
<li>HTML element encompasses
<ul>
<li>the element name within angle brackets</li>
<li>HTML elements can also contain <strong>attributes.</strong></li>
</ul>
</li>
</ul>
<img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-09%2016.30.27.png" style="zoom:50%;" />
<h4 id="basic-use">Basic use</h4>
<ul>
<li>Insert images using the <strong><img></strong> tag</li>
<li>Create links with the <strong><a></strong> tag</li>
<li>Create lists with the <strong><ul>, <ol></strong> and <strong><li></strong> tags</li>
<li>Create headings with <strong><H1>, <H2>, ..., <H6></strong></li>
<li>Define metadata with <strong><meta></strong> tag</li>
</ul>
<h4 id="sample-html-document">Sample HTML Document</h4>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-09%2016.33.33.png" alt="" loading="lazy"></figure>
<p><strong>Headings</strong></p>
<p>​	HTML provides six levels of heading (<strong>h1-h6</strong>), with the higher heading number indicating a heading of less importance.</p>
<p><strong>Paragraphs</strong></p>
<p>​	Notice that the <p> tag is a container and can contain HTML and other inline HTML elements</p>
<p><strong>Divisions</strong></p>
<ul>
<li>This <div> tag is also a container element and is used to create a logical grouping of content</li>
<li>has no intrinsic presentation.</li>
</ul>
<p><strong>Links</strong></p>
<ul>
<li>Links use the <a> element (the “a” stands for anchor).</li>
<li>A link has two main parts: the destination and the label.</li>
</ul>
<pre><code class="language-html">&lt;a href=&quot;http://www.somewhere.com&quot;&gt;Photo&lt;/a&gt;
&lt;!-- Same directory--&gt;
</code></pre>
<h5 id="url-relative-referencing">URL Relative Referencing</h5>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-09%2016.41.21.png" alt="" loading="lazy"></figure>
<h5 id="main-article-section">Main, article, section</h5>
<ul>
<li><em><strong>main</strong></em> is meant to contain the main unique content of the document.</li>
<li><em><strong>main</strong></em> provides a semantic replacement for markup such as <div id="main"> or <div id="main-content"></li>
<li><em><strong>section</strong></em> is a much broader element, while the</li>
<li><em><strong>article</strong></em> element is to be used for blocks of content that could potentially be read or consumed independently of the other content on the page</li>
</ul>
<h2 id="intro-to-css">Intro to CSS</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[x86_64 Assembler]]></title>
        <id>https://lijiexi.github.io/post/x86_64-assembler/</id>
        <link href="https://lijiexi.github.io/post/x86_64-assembler/">
        </link>
        <updated>2022-02-10T02:09:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="register-names">Register Names</h3>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>64-bit register</strong></th>
<th style="text-align:center"><strong>32-bit sub-register</strong></th>
<th style="text-align:center"><strong>16-bit sub-register</strong></th>
<th style="text-align:center"><strong>8-bit sub-register</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">%rax</td>
<td style="text-align:center">%eax</td>
<td style="text-align:center">%ax</td>
<td style="text-align:center">%al</td>
</tr>
<tr>
<td style="text-align:center">%rbx</td>
<td style="text-align:center">%ebx</td>
<td style="text-align:center">%bx</td>
<td style="text-align:center">%bl</td>
</tr>
<tr>
<td style="text-align:center">%rcx</td>
<td style="text-align:center">%ecx</td>
<td style="text-align:center">%cx</td>
<td style="text-align:center">%cl</td>
</tr>
<tr>
<td style="text-align:center">%rdx</td>
<td style="text-align:center">%edx</td>
<td style="text-align:center">%dx</td>
<td style="text-align:center">%dl</td>
</tr>
<tr>
<td style="text-align:center">%rsi</td>
<td style="text-align:center">%esi</td>
<td style="text-align:center">%si</td>
<td style="text-align:center">%sil</td>
</tr>
<tr>
<td style="text-align:center">%rdi</td>
<td style="text-align:center">%edi</td>
<td style="text-align:center">%di</td>
<td style="text-align:center">%dil</td>
</tr>
<tr>
<td style="text-align:center">%rbp</td>
<td style="text-align:center">%ebp</td>
<td style="text-align:center">%bp</td>
<td style="text-align:center">%bpl</td>
</tr>
<tr>
<td style="text-align:center">%rsp</td>
<td style="text-align:center">%esp</td>
<td style="text-align:center">%sp</td>
<td style="text-align:center">%spl</td>
</tr>
<tr>
<td style="text-align:center">%r8</td>
<td style="text-align:center">%r8d</td>
<td style="text-align:center">%r8w</td>
<td style="text-align:center">%r8b</td>
</tr>
<tr>
<td style="text-align:center">%r9</td>
<td style="text-align:center">%r9d</td>
<td style="text-align:center">%r9w</td>
<td style="text-align:center">%r9b</td>
</tr>
<tr>
<td style="text-align:center">%r10</td>
<td style="text-align:center">%r10d</td>
<td style="text-align:center">%r10w</td>
<td style="text-align:center">%r10b</td>
</tr>
<tr>
<td style="text-align:center">%r11</td>
<td style="text-align:center">%r11d</td>
<td style="text-align:center">%r11w</td>
<td style="text-align:center">%r11b</td>
</tr>
<tr>
<td style="text-align:center">%r12</td>
<td style="text-align:center">%r12d</td>
<td style="text-align:center">%r12w</td>
<td style="text-align:center">%r12b</td>
</tr>
<tr>
<td style="text-align:center">%r13</td>
<td style="text-align:center">%r13d</td>
<td style="text-align:center">%r13w</td>
<td style="text-align:center">%r13b</td>
</tr>
<tr>
<td style="text-align:center">%r14</td>
<td style="text-align:center">%r14d</td>
<td style="text-align:center">%r14w</td>
<td style="text-align:center">%r14b</td>
</tr>
<tr>
<td style="text-align:center">%r15</td>
<td style="text-align:center">%r15d</td>
<td style="text-align:center">%r15w</td>
<td style="text-align:center">%r15b</td>
</tr>
</tbody>
</table>
<h3 id="architecture-byte-order"><strong>architecture: byte order</strong></h3>
<img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-10%2015.16.45.png" style="zoom:50%;" />
<h3 id="references-to-memory">references to memory</h3>
<ul>
<li><strong>-16(%rsp)</strong></li>
<li><strong>8(%rbp)</strong></li>
<li><strong>127(%rip)</strong></li>
</ul>
<h3 id="relative-addressing"><strong>relative addressing</strong></h3>
<pre><code class="language-assembly">syntax: disp(base,index,scale) -&gt; base + index*scale +disp
eg: -3(%rbp,%rdi,8)
;typically used to access %rbp[%rdi] where each array element is 8 bytes long and you’re 
;accessing at -3 bytes from it
</code></pre>
<h3 id="addressing-modes">addressing modes</h3>
<pre><code class="language-assembly">;immediate:
mov $10, %eax
;register to register
mov %r8l, %al
;indirect
mov 1234(%rcx,%rax,8), %r8w
;it sometime is necessary to add a size postfix to instructions: movb, movw, movl, movq (b = byte, w = word, l = long, q = quadword)
;rip-relative:
movb 12(%rip), %al
</code></pre>
<h4 id="a-simple-example">a simple example</h4>
<p><strong>sum numbers 1 to 10 in register %eax</strong></p>
<pre><code class="language-assembly">	xor %eax, %eax	# zero %eax – why not “mov $0, %eax” ?
	mov $10, %ecx 	# set the loop index
lab:
	add %ecx, %eax  # %eax += %ecx
	loop lab				# dec %ecx, jump to lab if not zero
</code></pre>
<h3 id="common-instruction">common instruction</h3>
<h4 id="mov"><strong>MOV</strong></h4>
<pre><code class="language-assembly">movl $1, 0x604892    		#direct (address is constant value)
movl $1, (%rax)			 		#indirect (address is in register %rax)
movl $1, -24(%rbp)	 		#address = base(%rbp) + displacement(-24)
movl $1, 8(%rsp,%rdi,4) #address = %rsp + 8 + %rdi*4
</code></pre>
<h4 id="mov-v-lea">MOV V LEA</h4>
<pre><code class="language-assembly">mov d(b,i,s), %rax is like rax = *(b+s*i+d)
lea d(b,i,s), %rax is like rax = (b+s*i+d)
</code></pre>
<h4 id="cmov">CMOV</h4>
<p>**CMOVcc instructions can replace two instructions in situations like **</p>
<p><strong>&quot;if ecx == 5 then eax = ebx”</strong></p>
<pre><code class="language-assembly">    cmp $5, %ecx
    jnz continue
    mov %ebx, %eax
continue:
;it equals to 
	cmp $5, %ecx
    cmovz %ebx, %eax
</code></pre>
<h4 id="push-and-pop"><strong>push and pop</strong></h4>
<pre><code class="language-assembly">push &lt;src&gt; is like dec %rsp; mov &lt;src&gt;,(%rsp) 
pop &lt;dst&gt; is like mov (%rsp),&lt;dst&gt;; inc %rsp
</code></pre>
<h3 id="compile-and-link-the-files">compile and link the files</h3>
<p><strong>testmax3.c</strong></p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;inttypes.h&gt;

int64_t maxofthree(int64_t, int64_t, int64_t);

int main() {
    printf(&quot;%ld\n&quot;, maxofthree(1, -4, -7));
    printf(&quot;%ld\n&quot;, maxofthree(2, -6, 1));
    printf(&quot;%ld\n&quot;, maxofthree(2, 3, 1));
    printf(&quot;%ld\n&quot;, maxofthree(-2, 4, 3));
    printf(&quot;%ld\n&quot;, maxofthree(2, -6, 5));
    printf(&quot;%ld\n&quot;, maxofthree(2, 4, 6));
    return 0;
}
</code></pre>
<p><strong>max3.s</strong></p>
<pre><code class="language-assembly">        .globl  _maxofthree
        
        .text
_maxofthree:
        mov     %rdi, %rax              # result (rax) initially holds x
        cmp     %rsi, %rax              # is x less than y?
        cmovl   %rsi, %rax              # if so, set result to y
        cmp     %rdx, %rax              # is max(x,y) less than z?
        cmovl   %rdx, %rax              # if so, set result to z
        ret                
</code></pre>
<p><strong>complie and link</strong></p>
<pre><code>clang -o result testmax3.c max3.s 
</code></pre>
<p><strong>then execute the result file</strong></p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/20220210164141.png" alt="" loading="lazy"></figure>
<h3 id="calling-conventions">calling conventions</h3>
<table>
<thead>
<tr>
<th style="text-align:center">Register</th>
<th style="text-align:center">Convention</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>%rip</strong></td>
<td style="text-align:center">Instruction pointer</td>
</tr>
<tr>
<td style="text-align:center"><strong>%rsp</strong></td>
<td style="text-align:center">Stack pointer</td>
</tr>
<tr>
<td style="text-align:center"><strong>%rax</strong></td>
<td style="text-align:center">Return value</td>
</tr>
<tr>
<td style="text-align:center"><strong>%rdi</strong></td>
<td style="text-align:center">1st argument</td>
</tr>
<tr>
<td style="text-align:center"><strong>%rsi</strong></td>
<td style="text-align:center">2nd argument</td>
</tr>
<tr>
<td style="text-align:center"><strong>%rdx</strong></td>
<td style="text-align:center">3rd argument</td>
</tr>
<tr>
<td style="text-align:center"><strong>%rcx</strong></td>
<td style="text-align:center">4th argument</td>
</tr>
<tr>
<td style="text-align:center"><strong>%r8</strong></td>
<td style="text-align:center">5th argument</td>
</tr>
<tr>
<td style="text-align:center"><strong>%r9</strong></td>
<td style="text-align:center">6th argument</td>
</tr>
<tr>
<td style="text-align:center"><strong>%r10,%r11</strong></td>
<td style="text-align:center">Callee-owned</td>
</tr>
<tr>
<td style="text-align:center"><strong>%rbx,%rbp,%r12-%15</strong></td>
<td style="text-align:center">Caller-owned</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Software Security]]></title>
        <id>https://lijiexi.github.io/post/software-security/</id>
        <link href="https://lijiexi.github.io/post/software-security/">
        </link>
        <updated>2022-02-09T00:45:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<h3 id="risks">Risks</h3>
<ul>
<li>Service and data unavailability</li>
<li>Data leaks (client list, industrial secret, business plans, e-mail...)</li>
<li>Bank fraud, credit cards stolen ...</li>
</ul>
<h3 id="consequences">Consequences</h3>
<ul>
<li>Companies: losing money (stock market value)</li>
<li>Services (water, electricity ...)</li>
</ul>
<h3 id="vulnerabilities">Vulnerabilities</h3>
<ul>
<li>Vulnerabilities in physical systems</li>
<li>Vulnerabilities in infrastructures as networking systems</li>
<li>Vulnerabilities in Operative Systems</li>
<li>Vulnerabilities in Software</li>
</ul>
<h3 id="cia-triad">CIA Triad</h3>
<img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-08%2016.24.38.png" style="zoom:33%;" />
<h4 id="simple-example">Simple Example</h4>
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int main (int args, char** argv) {
		char buffer[500];
		strcpy(buffer,argv[1]);
		return 0;
}
</code></pre>
<ul>
<li>this program copy argv in a buffer</li>
<li>this program can do <strong>everything</strong></li>
</ul>
<h5 id="severe-vulnerability">Severe Vulnerability</h5>
<ul>
<li>Why? Because this program has a severe <strong>buffer overflow vulnerability</strong></li>
<li><strong>Buffer Overflow</strong> is a situation</li>
<li>wherewecanaccidentallyoverflowabuffer meant to manipulate data and overwrite arbitrary memory addresses</li>
<li>Overwritinglatermemoryaddresseswecancausemanykindsofproblems, including executing arbitrary code</li>
<li>Wecanexploitthismaliciouslytoperformanattack,e.g.byoverwritingthe original program’s code with our own code</li>
</ul>
<h3 id="vulnerability-threats-and-risk">Vulnerability, Threats and Risk</h3>
<h4 id="vulnerability">Vulnerability</h4>
<ul>
<li>weakness in the system</li>
<li>Internal factor</li>
</ul>
<h4 id="threat">Threat</h4>
<ul>
<li>condition that can cause harm</li>
<li>External factor</li>
</ul>
<h4 id="risk">Risk</h4>
<ul>
<li>Likelihood of the realisation of a threat</li>
<li>Vulnerability without a threat = <strong>no risk</strong></li>
<li>hreat without a vulnerability = <strong>no risk</strong></li>
</ul>
<h3 id="cvecvsscwe">CVE/CVSS/CWE</h3>
<ul>
<li>In 1999 MITRE (no-profit company) introduced an official uniform catalogue of vulnerabilities</li>
<li><a href="https://cve.mitre.org/">CVE</a> – Common Vulnerabilities and Exposures</li>
<li><a href="https://nvd.nist.gov/vuln-metrics/cvss">CVSS</a> – Common Vulnerability Scoring System</li>
<li><a href="https://cwe.mitre.org">CWE</a> – Common Weakness Enumeration</li>
</ul>
<h2 id="low-level-programming-languages-c">Low-level Programming Languages &amp; C</h2>
<h3 id="c-memory-layout">C memory layout</h3>
<img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/20220208163923.png" style="zoom:50%;" />
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int main (int args, char** argv) {
		char buffer[500];
		strcpy(buffer,argv[1]);
		return 0;
}
</code></pre>
<ul>
<li>Use this code for an example</li>
<li>What happens if put 508 bytes</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/20220208164132.png" alt="" loading="lazy"></figure>
<p>​	<strong>On re-entry, the code will try to jump back to a possibly illegal address, causing a so-called “<em>Segmentation Fault</em>” and a crash, a total system failure.</strong></p>
<h4 id="we-can-be-more-evil">we can be more evil</h4>
<ul>
<li><strong>executeanarbitrarycodelike A shell, a malware, etc.</strong></li>
<li>Which of course gives me a lot of control over the machine, and sends all the CIA properties packing...</li>
</ul>
<h3 id="low-level-v-high-level-languages"><strong>Low-level v High-level languages</strong></h3>
<ul>
<li>High-level are more “programmer” friendly</li>
<li>Low-level languages are difficult to understand, read and code</li>
<li>Machine Code is impossible to read</li>
<li>C is the language of all software libraries, so the foundation of our current software stacks</li>
<li>Assembly can be used for analysis of decompiled code</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Functions, Memory Layout - stack, and Arrays]]></title>
        <id>https://lijiexi.github.io/post/functions-memory-layout-stack-and-arrays/</id>
        <link href="https://lijiexi.github.io/post/functions-memory-layout-stack-and-arrays/">
        </link>
        <updated>2022-02-03T04:30:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="definging-functions">Definging Functions</h3>
<pre><code class="language-c">return_type function_name (parameter list)
{
				body of the function
}
</code></pre>
<ul>
<li>The return_type is the type the function returns</li>
<li><strong>Some functions do not return values, in this case void is used</strong></li>
<li><strong>The function name and the parameter list together constitute the function signature</strong></li>
<li>a function may contain no parameters</li>
<li>The function body contains a collection of statements that define what the function does</li>
</ul>
<h3 id="call-by-value">call by value</h3>
<ul>
<li>The <strong>call by value</strong> method of passing arguments to a function copies the actual value of an argument into the formal parameter of the function</li>
<li>changes made to the parameters inside the function have no effect on the arguments</li>
</ul>
<pre><code class="language-c">void swap (int x, int y);
int main (){
		int a = 100, b = 20;
		printf(&quot;Before swap, value of a : %d\n&quot;, a);
		printf(&quot;Before swap, value of b : %d\n&quot;, b);
		swap(a,b);
		printf(&quot;After swap, value of a : %d\n&quot;, a ); 
		printf(&quot;After swap, value of b : %d\n&quot;, b );
		return 0;
}
void swap (int x, int y) {
		int temp = x;
		x = y;
		y = temp;
}
</code></pre>
<h3 id="call-by-reference">call by reference</h3>
<ul>
<li>The <strong>call by reference</strong> method of passing arguments to a function copies the address of an argument into the formal parameter</li>
<li>Inside the function, the address is used to access the actual argument used in the call
<ul>
<li>changes made to the parameter affect the passed argument</li>
<li>To pass by reference, argument pointers are passed to the functions just</li>
</ul>
</li>
<li>the function parameters need to be declared as <strong>pointer</strong> types</li>
</ul>
<pre><code class="language-c">void swap (int *x, int *y);
int main (){
		int a = 100, b = 20;
		printf(&quot;Before swap, value of a : %d\n&quot;, a);
		printf(&quot;Before swap, value of b : %d\n&quot;, b);
		swap(&amp;a,&amp;b);
		printf(&quot;After swap, value of a : %d\n&quot;, a ); 
		printf(&quot;After swap, value of b : %d\n&quot;, b );
		return 0;
}
void swap (int *x, int *y) {
		int temp = *x;
		*x = *y;
		*y = temp;
}
</code></pre>
<h3 id="memory-layout-stack">Memory Layout - Stack</h3>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/20220208121904.png" alt="" loading="lazy"></figure>
<ul>
<li>The stack segment is the area where local variables are stored
<ul>
<li>local variable are declared in every function including main() in C program</li>
</ul>
</li>
<li>When we call any function a <strong>stack frame</strong> is created</li>
<li>function returns, stack frame is destroyed including all local variables of that particular function</li>
<li>Stack frame contain some data like <strong>return address</strong>, arguments passed to the function, local variables,. . .</li>
<li>A “stack pointer (SP)” keeps track of stack by each push and pop operation onto it</li>
</ul>
<img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-08%2012.22.43.png" style="zoom:50%;" />
<img src="https://raw.githubusercontent.com/lijiexi/Picbed_PicGo/main/blogImg/%E6%88%AA%E5%B1%8F2022-02-08%2012.23.03.png" style="zoom:50%;" />
<h3 id="arrays">Arrays</h3>
<ul>
<li>Array a fixed-size sequential collection of elements of the same type</li>
<li>An array is used to store a collection of data of the same type</li>
<li>All arrays consist of contiguous memory locations
<ul>
<li>The lowest address corresponds to the first element and the highest address to the last element</li>
</ul>
</li>
<li><strong>Declaring arrays</strong>: double balance[10];</li>
</ul>
<h4 id="initialingzing-arrays">Initialingzing arrays:</h4>
<pre><code class="language-c">double balance[5] = {1000.0, 2.0, 3.4, 17.0, 50.0};
</code></pre>
<h4 id="we-can-ommit-the-size">we can ommit the size:</h4>
<pre><code class="language-c">double balance[] = {1000.0, 2.0, 3.4, 17.0, 50.0};
</code></pre>
<h4 id="accessing-an-array">Accessing an array:</h4>
<pre><code class="language-c">balance[4] = 50.0;
double salary = balance[3];
</code></pre>
<h3 id="two-dimensional-arrays">Two-dimensional Arrays</h3>
<ul>
<li>The simplest form of multidimensional array is the two-dimensional array</li>
<li>A two-dimensional array is an array of one-dimensional arrays</li>
<li>Declaring 2D arrays:</li>
</ul>
<pre><code class="language-c">int a[3][4];
</code></pre>
<ul>
<li>Initializing 2D arrays:</li>
</ul>
<pre><code class="language-c">int a[3][4] = {
		{0, 1, 2, 3} ,
		{4, 5, 6, 7} , {8, 9, 10, 11}
};
</code></pre>
<h4 id="three-ways-to-pass-an-array-to-functions">three ways to pass an array to functions</h4>
<ul>
<li>as a pointer:</li>
</ul>
<pre><code class="language-c">void myFunction(int *param) {...}
</code></pre>
<ul>
<li>as a sized array:</li>
</ul>
<pre><code class="language-c">void myFunction(int param[10]) {...}
</code></pre>
<ul>
<li>as a unsized array:</li>
</ul>
<pre><code class="language-c">void myFunction(int param[]) {...}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis 分布式锁]]></title>
        <id>https://lijiexi.github.io/post/redis-fen-bu-shi-suo/</id>
        <link href="https://lijiexi.github.io/post/redis-fen-bu-shi-suo/">
        </link>
        <updated>2022-02-01T13:23:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="分布式锁">分布式锁</h3>
<p>​	分布式应用进行逻辑处理时经常会遇到并发问题, 比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修 改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。(Wiki 解释:所谓原子操作是指不会被线程调度机制打断的操作;这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。)</p>
<h3 id="本质">本质</h3>
<p>​	分布式锁本质上要实现的目标就是在 Redis 里面使用 setnx(set if not exists) 指令占位，当别的进程也要来占位时，发现已经被他人捷足先登，就只好放弃或者稍后再试。</p>
<pre><code>&gt; setnx lock true
OK
... critial section ...
&gt; del lock
(Integer) 1 
</code></pre>
<p>​	但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样 就会陷入死锁，锁永远得不到释放。</p>
<p>​	于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也 可以保证 5 秒之后锁会自动释放。</p>
<pre><code>&gt; setnx lock true
OK
&gt; expire lock 5
... critial section ...
&gt; del lock
(Integer) 1 
</code></pre>
<p>​	但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因 为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。</p>
<p>​	为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。</p>
<pre><code>&gt; set lock true ex 5 nx 
OK 
... do something critical ...
 &gt; del lock
</code></pre>
<p>​	上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。</p>
<h3 id="超时问题">超时问题</h3>
<p>​	Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至 于超出了锁的超时限制，就会出现问题。因为这时候锁过期了，第二个线程重新持有了这把锁， 但是紧接着第一个线程执行完了业务逻辑，就把锁给释放了，第三个线程就会在第二个线程逻 辑执行完之间拿到了锁。</p>
<p>​	为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数 据出现的小波错乱可能需要人工介入解决。</p>
<h3 id="可重入性">可重入性</h3>
<p>​	可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis基础数据结构]]></title>
        <id>https://lijiexi.github.io/post/redis-ji-chu-shu-ju-jie-gou/</id>
        <link href="https://lijiexi.github.io/post/redis-ji-chu-shu-ju-jie-gou/">
        </link>
        <updated>2022-01-31T04:56:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="redis-基础数据结构">Redis 基础数据结构</h3>
<p>​	Redis 有 5 种基础数据结构，分别为:string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。</p>
<h4 id="string-字符串">string (字符串)</h4>
<p>​	字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。</p>
<p>​	Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配。当字符串长度小于 1M 时， 扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。</p>
<h5 id="过期和-set-命令扩展">过期和 set 命令扩展</h5>
<p>可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。</p>
<h5 id="计数">计数</h5>
<p>如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构。</p>
<h4 id="list-列表">list (列表)</h4>
<p>​	Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)。</p>
<h5 id="快速列表">快速列表</h5>
<p>​	首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是 ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的 时候才会改成 quicklist。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且 会加重内存的碎片化。比如这个列表里存的只是 int 类型的数据，结构上还需要两个额外的指针 prev 和 next 。所以 Redis 将链表和 ziplist 结合起来组成了 quicklist。也就是将多个 ziplist 使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空 间冗余。</p>
<h4 id="hash-字典">hash (字典)</h4>
<p>​	Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞 时，就会将碰撞的元素使用链表串接起来。</p>
<h4 id="set-集合">set (集合)</h4>
<p>​	Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值 NULL。</p>
<p>​	当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。set 结构可以用来 存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。</p>
<h4 id="zset-有序列表">zset (有序列表)</h4>
<p>​	它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。</p>
<p>​	zset 可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们 可以对成绩按分数进行排序就可以得到他的名次。</p>
<h3 id="容器型数据结构的通用规则">容器型数据结构的通用规则</h3>
<p>list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则:</p>
<h5 id="1-create-if-not-exists">1、create if not exists</h5>
<p>​	如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，</p>
<p>Redis 就会自动创建一个，然后再 rpush 进去新元素。</p>
<h5 id="2-drop-if-no-elements">2、drop if no elements</h5>
<p>​	如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一</p>
<p>个元素，列表就消失了。</p>
<p><strong>过期时间</strong></p>
<p>​	Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。 需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期， 而不是其中的某个子 key。</p>
<p>​	还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了</p>
<p>set 方法修改了它，它的过期时间会消失。</p>
]]></content>
    </entry>
</feed>